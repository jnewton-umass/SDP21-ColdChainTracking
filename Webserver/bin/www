#!/usr/bin/env node
/**
 * Module dependencies.
 */
var constants = require('../constants/constants')
var statusServices = require('../services/statusServices');
var app = require('../app');
var debug = require('debug')('sdp21-coldchaintracking:server');
var http = require('http');
var net = require('net');
/**
 * Get port from environment and store in Express.
 */

var portHTTP = normalizePort('8080');
app.set('port', portHTTP);
var portTCP = normalizePort('8081');
/**
 * Create HTTP server and TCP server
 */

var serverHTTP = http.createServer(app);
var serverTCP = net.createServer();
/**
 * Listen on provided port, on all network interfaces.
 */

serverHTTP.listen(portHTTP);
serverHTTP.on('error', onError);
serverHTTP.on('listening', onListening);
serverTCP.listen(portTCP);
serverTCP.on('connection', function(socket) {
  socket.on('connect', function() {
    console.log('A new connection has been established.');
    socket.write("Success");
  });
  socket.on('data', function(data) {
    console.log('Data Received: \t' + data)
    await statusServices.registerStatus(data)
    .then(result => {
      socket.write("Successful Status Update");
    })
    .catch(error => {
      socket.write("Failed Status Update")
    })
  });
  socket.on('end', function() {
    console.log('Socket ended.');
  });
  socket.on('timeout', function() {
    console.log('Connection timed out.');
  });
  socket.on('error', function(error) {
    console.log('Socket had error: \t' + error);
  });
  socket.on('close', function() {
    console.log('Connection was closed.')
  });
});
serverTCP.on('listening', function() {
  var addr = serverTCP.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(addr);
  console.log('Listening for a TCP connection on ' + bind);
  debug('Listening on ' + bind);
});
serverTCP.on('close', function() {
  console.log('Connection closed.');
});
serverTCP.on('error', function(error) {
  console.log('There was an error with the connection.\n' + error);
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = serverHTTP.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening for a HTTP connection on ' + bind);
  debug('Listening on ' + bind);
}
